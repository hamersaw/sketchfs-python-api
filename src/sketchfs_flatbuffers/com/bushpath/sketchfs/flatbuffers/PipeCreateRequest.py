# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffers

import flatbuffers

class PipeCreateRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPipeCreateRequest(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PipeCreateRequest()
        x.Init(buf, n + offset)
        return x

    # PipeCreateRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PipeCreateRequest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # PipeCreateRequest
    def SketchIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # PipeCreateRequest
    def SketchIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PipeCreateRequest
    def Features(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # PipeCreateRequest
    def FeaturesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def PipeCreateRequestStart(builder): builder.StartObject(3)
def PipeCreateRequestAddId(builder, id): builder.PrependInt64Slot(0, id, 0)
def PipeCreateRequestAddSketchIds(builder, sketchIds): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(sketchIds), 0)
def PipeCreateRequestStartSketchIdsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PipeCreateRequestAddFeatures(builder, features): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(features), 0)
def PipeCreateRequestStartFeaturesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PipeCreateRequestEnd(builder): return builder.EndObject()
