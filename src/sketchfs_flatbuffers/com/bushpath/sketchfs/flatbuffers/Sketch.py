# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffers

import flatbuffers

class Sketch(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSketch(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Sketch()
        x.Init(buf, n + offset)
        return x

    # Sketch
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Sketch
    def Generation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Sketch
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # Sketch
    def Replication(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Sketch
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Sketch
    def ClassPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # Sketch
    def Features(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Feature import Feature
            obj = Feature()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Sketch
    def FeaturesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def SketchStart(builder): builder.StartObject(6)
def SketchAddGeneration(builder, generation): builder.PrependInt64Slot(0, generation, 0)
def SketchAddId(builder, id): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def SketchAddReplication(builder, replication): builder.PrependInt16Slot(2, replication, 0)
def SketchAddSource(builder, source): builder.PrependInt8Slot(3, source, 0)
def SketchAddClassPath(builder, classPath): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(classPath), 0)
def SketchAddFeatures(builder, features): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(features), 0)
def SketchStartFeaturesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SketchEnd(builder): return builder.EndObject()
